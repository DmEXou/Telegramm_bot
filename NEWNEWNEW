#include <string>
#include <map>
#include <cassert>
#include <iostream>

using namespace std;
class Translator {
public:
    void Add(string_view source, string_view target) {
        trans.insert(make_pair( source, target ));
        transre.insert(make_pair(target, source));
    };
    string_view TranslateForward(string_view source) const {
        return trans.at(source);
    }
    string_view TranslateBackward(string_view target) const {
        return transre.at(target);
    }

private:
    map<string_view, string_view> trans;
    map<string_view, string_view> transre;
};

void TestSimple() {
    Translator translator;
    translator.Add(string("okno"s), string("window"s));
    translator.Add(string("stol"s), string("table"s));
    string_view str("okno"s);
    string str_nov(str);
    cout << str_nov << endl;

    //assert(translator.TranslateForward("okno"s) == "window"s);
    //assert(translator.TranslateBackward("table"s) == "stol"s);
    //assert(translator.TranslateForward("table"s) == ""s);
}

int main() {
    TestSimple();
    return 0;
}
