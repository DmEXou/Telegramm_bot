#pragma once
#include "array_ptr.h"

#include <cassert>
#include <initializer_list>
#include <stdexcept>

#include <iostream>

template <typename Type>
class SimpleVector {
public:
    using Iterator = Type*;
    using ConstIterator = const Type*;

    SimpleVector() noexcept = default;

    // Создаёт вектор из size элементов, инициализированных значением по умолчанию
    explicit SimpleVector(size_t size)
        : arrey_(size)
    {
        size_ = size;
        capacity_ = size;
        if (size == 0) {
            items_ = nullptr;
        }
        else {
            std::fill(arrey_.Get(), arrey_.Get() + size, Type{});
            items_ = &arrey_[0];
        }
    }

    // Создаёт вектор из size элементов, инициализированных значением value
    SimpleVector(size_t size, const Type& value)
        : arrey_(size)
    {
        size_ = size;
        capacity_ = size;
        if (size == 0) {
            items_ = nullptr;
        }
        else {
            std::fill(arrey_.Get(), arrey_.Get() + size, value);
            items_ = &arrey_[0];
        }
    }

    // Создаёт вектор из std::initializer_list
    SimpleVector(std::initializer_list<Type> init)
        : arrey_(init.size())
    {
        size_ = init.size();
        capacity_ = init.size();
        if (init.size() == 0) {
            items_ = nullptr;
        }
        else {
            std::copy(init.begin(), init.end(), arrey_.Get());
            items_ = &arrey_[0];
        }
    }

    SimpleVector(const SimpleVector& other)
        : arrey_(other.GetSize())
    {
        size_ = other.GetSize();
        capacity_ = other.GetCapacity();
        if (other.GetSize() == 0) {
            items_ = nullptr;
        } else {
            std::copy(other.begin(), other.end(), arrey_.Get());
            items_ = &arrey_[0];
        }

    }

    SimpleVector& operator=(const SimpleVector& rhs) {
        // Напишите тело конструктора самостоятельно
        return *this;
    }

    // Добавляет элемент в конец вектора
    // При нехватке места увеличивает вдвое вместимость вектора
    void PushBack(const Type& item) {
        size_t old_size = size_;

        if (capacity_ == size_) {
            if (size_ == 0) { size_ = 1; }
            size_t new_size = size_ * 2;
            Resize(new_size);
        } else {
            size_++;
        }
        arrey_[old_size] = item;
    }

    // Вставляет значение value в позицию pos.
    // Возвращает итератор на вставленное значение
    // Если перед вставкой значения вектор был заполнен полностью,
    // вместимость вектора должна увеличиться вдвое, а для вектора вместимостью 0 стать равной 1
    Iterator Insert(ConstIterator pos, const Type& value) {
        //if (size_ == capacity_) {

        //    Resize(capacity_*2);
        //}
        int a = 0;
        Type* pos2 = &a;
        return pos2;
    }

    // "Удаляет" последний элемент вектора. Вектор не должен быть пустым
    void PopBack() noexcept {
        // Напишите тело самостоятельно
    }

    // Удаляет элемент вектора в указанной позиции
    Iterator Erase(ConstIterator pos) {
        // Напишите тело самостоятельно
        int a = 0;
        Type* pos2 = &a;
        return pos2;
    }

    // Обменивает значение с другим вектором
    void swap(SimpleVector& other) noexcept {
        // Напишите тело самостоятельно
    }

    // Возвращает количество элементов в массиве
    size_t GetSize() const noexcept {
        // Напишите тело самостоятельно
        return size_;
    }

    // Возвращает вместимость массива
    size_t GetCapacity() const noexcept {
        // Напишите тело самостоятельно
        return capacity_;
    }

    // Сообщает, пустой ли массив
    bool IsEmpty() const noexcept {
        return (size_ == 0);
    }

    // Возвращает ссылку на элемент с индексом index
    Type& operator[](size_t index) noexcept {
        return *(items_ + index);
    }

    // Возвращает константную ссылку на элемент с индексом index
    const Type& operator[](size_t index) const noexcept {
        return *(items_ + index);
    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    Type& At(size_t index) {
        if (index >= size_) {
            throw std::out_of_range("Out of range");
        }
        else {
            return *(items_ + index);
        }
    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    const Type& At(size_t index) const {
        if (index >= size_) {
            throw std::out_of_range("Out of range");
        }
        else {
            return *(items_ + index);
        }
    }

    // Обнуляет размер массива, не изменяя его вместимость
    void Clear() noexcept {
        size_ = 0;
    }

    // Изменяет размер массива.
    // При увеличении размера новые элементы получают значение по умолчанию для типа Type
    void Resize(size_t new_size) {
        if (new_size > size_) {
            ArrayPtr<Type> tmp(new_size);
            std::fill(tmp.Get(), tmp.Get() + new_size, Type{});
            std::copy(arrey_.Get(), arrey_.Get() + size_, tmp.Get());
            arrey_.Swap(tmp);
            items_ = &arrey_[0];
            size_ = new_size;
            capacity_ = new_size*2;
        }
        else {
            size_ = new_size;
        }
    }

    // Возвращает итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator begin() noexcept {
        return items_;
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator end() noexcept {
        auto tmp = items_ + size_;
        return tmp;

    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator begin() const noexcept {
        return items_;
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator end() const noexcept {
        auto tmp = items_ + size_;
        return tmp;
    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cbegin() const noexcept {
        return items_;
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cend() const noexcept {
        auto tmp = items_ + size_;
        return tmp;
    }
private:
    Type* items_ = nullptr;
    ArrayPtr<Type> arrey_;
    size_t size_ = 0;
    size_t capacity_ = 0;
};

template <typename Type>
inline bool operator==(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    // Заглушка. Напишите тело самостоятельно
    return true;
}

template <typename Type>
inline bool operator!=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    // Заглушка. Напишите тело самостоятельно
    return true;
}

template <typename Type>
inline bool operator<(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    // Заглушка. Напишите тело самостоятельно
    return true;
}

template <typename Type>
inline bool operator<=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    // Заглушка. Напишите тело самостоятельно
    return true;
}

template <typename Type>
inline bool operator>(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    // Заглушка. Напишите тело самостоятельно
    return true;
}

template <typename Type>
inline bool operator>=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    // Заглушка. Напишите тело самостоятельно
    return true;
}
